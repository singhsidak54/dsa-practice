package Scaler.DP;

public class MaxProductSubarray {
    public int maxProduct(final int[] A) {
        int max = A[0], maxPositiveTillNow = 1, maxNegativeTillNow = 1;
        for(int i=0; i<A.length; i++) {
            maxPositiveTillNow = Math.max(A[i], Math.max(A[i] * maxPositiveTillNow, A[i] * maxNegativeTillNow));
            maxNegativeTillNow = Math.min(A[i], Math.min(A[i] * maxPositiveTillNow, A[i] * maxNegativeTillNow));
            max = Math.max(max, Math.max(maxPositiveTillNow, maxNegativeTillNow));
        }

        return max;
    }

    public static void main(String[] args) {
        int[] arr = {0,0,-2,0,1,0,0,0,-1,0,0,0,0,0,0,0,1,0,0,0,0,0,-3,0,0,0,0,0,0,0,0,-1,0,0,0,0,2,-3,0,0,0,0,-1,0,0,0,0,0,0,0,0,1,0,0,0,-3,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,0,0,0,0,0,0,0,0,0,0,-2,1,0,0,0,0,0,0,0,0,2,0,0,0,0,0,1,0,0,-3,0,-3,0,0,0,0,0,0,0,0,0,0,0,3,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,0,0,-1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,-2,0,0,0,0,0,0,0,0,0,-1,0,-3,-2,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,-2,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,3,1,0,0,0,0,3,0,0,0,0,1,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,0,0,0,0,0,1,0,0,-3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,2,0,0,0,0,0,-1,0,0,0,1,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,-2,0,-1,0,0,-2,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,1,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,3,0,0,0,0,-3,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0};
        MaxProductSubarray obj = new MaxProductSubarray();
        System.out.println(obj.maxProduct(arr));
    }
}
